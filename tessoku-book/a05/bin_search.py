'''
https://qiita.com/gogotealove/items/11f9e83218926211083a

「n 個の選択肢それぞれに Yes or No の二択があるが、その部分集合（選択できるパターン）の全てを網羅的にチェックしたい」といった場合に使えます。
Yes or No の二択が n 箇所あるので、パターン数は2**nになります。（何も選ばないという選択肢もパターンに含まれます）
この選択肢の1つ1つを2進数の bit に見立ててシフト演算でチェックを行うことから「bit 全探索」とも呼ばれますが、やっていることは単なる全探索です。
'''

'''
*pythonでは2進数に変換しなくてもビット演算を行うことができる
a & b(AND)   a | b(OR)  a ^ b(XOR)
'''

'''
みかん（100円）りんご（200円）ぶどう（300円）がそれぞれ1つずつ果物屋さんにありました。財布の中には300円ありますが、考え得るすべての買い物パターンを列挙しなさい。
'''

money = 300
item = (("みかん", 100), ("りんご", 200), ("ぶどう", 300))
n = len(item)
for i in range(2 ** n):
    bag = []
    total = 0
    for j in range(n):  # このループが一番のポイント
        if ((i >> j) & 1):  # 順に右にシフトさせ最下位bitのチェックを行う
            bag.append(item[j][0])  # フラグが立っていたら bag に果物を詰める
            total += item[j][1]  # 買い物累計額にも加算
    if (total <= money):
        print(total, bag)